version: '3.8'

services:
  # Í∂åÌïú Ï¥àÍ∏∞Ìôî Ìó¨Ìçº ÏÑúÎπÑÏä§
  pixelzx-init:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
        - linux/arm/v7
    container_name: pixelzx-init-helper
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    volumes:
      - pixelzx-data:/app/data
      - pixelzx-keystore:/app/keystore
      - pixelzx-logs:/app/logs
    environment:
      - PIXELZX_CHAIN_ID=8888
      - PIXELZX_NETWORK=mainnet
    command: >
      sh -c "
        echo 'üîç Í∂åÌïú Î∞è ÎîîÎ†âÌÑ∞Î¶¨ ÏÑ§Ï†ï Ï§ë...' &&
        mkdir -p /app/data /app/keystore /app/logs &&
        chown -R 1001:1001 /app/data /app/keystore /app/logs &&
        chmod -R 755 /app/data /app/keystore /app/logs &&
        echo 'üöÄ PIXELZX Ï≤¥Ïù∏ Ï¥àÍ∏∞Ìôî Ï§ë...' &&
        /usr/local/bin/pixelzx init --datadir /app/data --chain-id 8888 --network mainnet &&
        echo '‚úÖ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!'
      "
    profiles:
      - init

  pixelzx-node:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
        - linux/arm/v7
    container_name: pixelzx-mainnet
    restart: unless-stopped
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    ports:
      - "8545:8545"   # JSON-RPC
      - "8546:8546"   # WebSocket
      - "30303:30303" # P2P
      - "6060:6060"   # Metrics
    volumes:
      - pixelzx-data:/app/data
      - pixelzx-keystore:/app/keystore
      - pixelzx-logs:/app/logs
      - ./configs/production.yaml:/app/config.yaml:ro
    environment:
      - PIXELZX_HOME=/app
      - PIXELZX_CONFIG=/app/config.yaml
      - PIXELZX_DATA_DIR=/app/data
      - PIXELZX_CHAIN_ID=8888
      - PIXELZX_NETWORK=mainnet
      - PIXELZX_PLATFORM=${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    networks:
      - pixelzx-net
    healthcheck:
      test: ["CMD", "/usr/local/bin/pixelzx", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    depends_on:
      - pixelzx-init

  # Optional: Monitoring with Prometheus (uncomment if needed)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: pixelzx-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus-data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #   networks:
  #     - pixelzx-net

  # Optional: Grafana dashboard (uncomment if needed)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: pixelzx-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #     - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
  #     - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   networks:
  #     - pixelzx-net

volumes:
  pixelzx-data:
    driver: local
  pixelzx-keystore:
    driver: local
  pixelzx-logs:
    driver: local
  # prometheus-data:
  #   driver: local
  # grafana-data:
  #   driver: local

networks:
  pixelzx-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16